using Data.Providers;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging.Console;
using Services.Interfaces;
using Models.Domain.Compensations;
using Data;
using Models;
using Models.Requests.Compensations;
using Models.Domain;
using System.Xml.Linq;
using Stripe;
using Models.Domain.Organizations;
using Models.Domain.Jobs;
using Models.Domain.Blogs;

namespace Services
{
    public class CompensationService : ICompensationService
    {
        IDataProvider _data = null;
        private static ILookUpService _lookUpService = null;

        public CompensationService(IDataProvider data, ILookUpService lookUpService)
        {
            _data = data;
            _lookUpService = lookUpService;
        }

        public int AddElement(CompensationElementAddRequest request, int currentUserId)
        {
            int id = 0;

            string procName = "[dbo].[CompensationElements_Insert]";
            _data.ExecuteNonQuery(procName,
                inputParamMapper: delegate (SqlParameterCollection col)
                {
                    AddCommonElementParams(request, col);

                    SqlParameter idOut = new SqlParameter("@Id", SqlDbType.Int);
                    idOut.Direction = ParameterDirection.Output;

                    col.Add(idOut);
                },
                returnParameters: delegate (SqlParameterCollection returnCollection)
                {
                    object oId = returnCollection["@Id"].Value;

                    int.TryParse(oId.ToString(), out id);

                    Console.WriteLine("");
                });
            return id;
        }

        public CompensationElement SelectByElementId(int id)
        {
            CompensationElement element = null;

            string procName = "[dbo].[CompensationElements_SelectById]";


            _data.ExecuteCmd(procName, delegate (SqlParameterCollection paramCollection)
            {

                paramCollection.AddWithValue("@CompElementId", id);

            }, delegate (IDataReader reader, short set)  
            {
                element = MapSingleElement(reader);

            }
            );

            return element;

        }

        public CompensationElement SelectByCompPackageId(int compPackageId)
        {
            CompensationElement element = null;

            string procName = "[dbo].[CompensationElements_SelectByCompPackageId]";


            _data.ExecuteCmd(procName, delegate (SqlParameterCollection paramCollection)
            {

                paramCollection.AddWithValue("@CompPackageId", compPackageId);

            }, delegate (IDataReader reader, short set)  
            {
                element = MapSingleElement(reader);

            }
            );

            return element;

        }

        public void UpdateElement(CompensationElementUpdateRequest updateRequest, int currentUserId)
        {
            string procName = "[dbo].[CompensationElements_Update]";
            _data.ExecuteNonQuery(procName,
                inputParamMapper: delegate (SqlParameterCollection col)
                {
                    AddCommonElementParams(updateRequest, col); 
                    col.AddWithValue("@Id", updateRequest.Id);
                },
                returnParameters: null);
        }

        public void DeleteElement(int id)
        {
            string procName5 = "[dbo].[CompensationElements_Delete]";
            _data.ExecuteNonQuery(procName5, inputParamMapper: delegate (SqlParameterCollection col)
            {
                col.AddWithValue("@Id", id);
            }, returnParameters: null);
        }

        private static void AddCommonElementParams(CompensationElementAddRequest request, SqlParameterCollection col)
        {
            col.AddWithValue("@CompensationPackageId", request.CompensationPackageId);
            col.AddWithValue("@CompensationTypeId", request.CompensationTypeId);
            col.AddWithValue("@CompensationLabelId", request.CompensationLabelId);
            col.AddWithValue("@NumericValue", request.NumericValue);
        }

        private static CompensationElement MapSingleElement(IDataReader reader)
        {
            CompensationElement element = new CompensationElement();

            element.Organization = new Organization();
            element.User = new BaseUser();
            LookUp lookUp = new LookUp();

            int startingIndex = 0;

            element.CompElementId = reader.GetSafeInt32(startingIndex++);

            element.Organization.Id = reader.GetSafeInt32(startingIndex++);
            element.User.Id = reader.GetSafeInt32(startingIndex++);
            element.User.Id = reader.GetSafeInt32(startingIndex++);


            element.IsDeleted = reader.GetSafeBool(startingIndex++);
            element.Description = reader.GetSafeString(startingIndex++);
            element.NumericValue = reader.GetSafeInt32(startingIndex++);

            element.CompensationPackage = new LookUp();
            element.CompensationPackage.Id = reader.GetInt32(startingIndex++);
            element.CompensationPackage.Name = reader.GetSafeString(startingIndex++);

            element.CompensationLabel = new LookUp();
            element.CompensationLabel.Id = reader.GetSafeInt32(startingIndex++);
            element.CompensationLabel.Name = reader.GetSafeString(startingIndex++);

            element.CompensationType = new LookUp();
            element.CompensationType.Id = reader.GetSafeInt32(startingIndex++);
            element.CompensationType.Name = reader.GetSafeString(startingIndex++);

            return element;
        }

        public int AddPackage(CompensationPackageAddRequest request, int currentUserId)
        {
            int id = 0;

            string procName = "[dbo].[CompensationPackages_Insert]";
            _data.ExecuteNonQuery(procName,
                inputParamMapper: delegate (SqlParameterCollection col)
                {
                    AddCommonPackageParams(request, col, currentUserId);

                    SqlParameter idOut = new SqlParameter("@Id", SqlDbType.Int);
                    idOut.Direction = ParameterDirection.Output;

                    col.Add(idOut);
                },
                returnParameters: delegate (SqlParameterCollection returnCollection)
                {
                    object oId = returnCollection["@Id"].Value;

                    int.TryParse(oId.ToString(), out id);

                    Console.WriteLine("");
                });
            return id;
        }

        public CompensationPackage SelectByPackageId(int id)
        {
            CompensationPackage package = null;

            string procName = "[dbo].[CompensationPackages_SelectById]";


            _data.ExecuteCmd(procName, delegate (SqlParameterCollection paramCollection)
            {

                paramCollection.AddWithValue("@CompPackageId", id);

            }, delegate (IDataReader reader, short set)  
            {
                int startingIndex = 0;
                package = MapSinglePackage(reader, ref startingIndex);

            }
            );

            return package;

        }

        public void UpdatePackage(CompensationPackageUpdateRequest updateRequest, int currentUserId)
        {
            string procName = "[dbo].[CompensationPackages_Update]";
            _data.ExecuteNonQuery(procName,
                inputParamMapper: delegate (SqlParameterCollection col)
                {
                    AddCommonPackageParams(updateRequest, col, currentUserId);
                    col.AddWithValue("@CompPackageId", updateRequest.Id);
                },
                returnParameters: null);
        }

        public Paged<CompensationPackage> SelectByOrgIdPaged(int pageIndex, int pageSize, int orgId)
        {
            string procName = "[dbo].[CompensationPackages_SelectByOrgId]";
 
            Paged<CompensationPackage> pagedList = null;
            List<CompensationPackage> list = null;
            int totalCount = 0;

            _data.ExecuteCmd(
                procName, (SqlParameterCollection inputParams) =>
                {
                    inputParams.AddWithValue("@PageIndex", pageIndex);
                    inputParams.AddWithValue("@PageSize", pageSize);
                    inputParams.AddWithValue("@OrgId", orgId);
                },
                delegate (IDataReader reader, short set)
                {
                    int startingIndex = 0;
                    CompensationPackage package = MapSinglePackage(reader, ref startingIndex);
                    
                    if (totalCount == 0)
                    {
                        totalCount = reader.GetSafeInt32(startingIndex++);
                    }


                    if (list == null)
                    {
                        list = new List<CompensationPackage>();
                    }

                    list.Add(package);
                }
                );
            if (list != null)
            {
                pagedList = new Paged<CompensationPackage>(list, pageIndex, pageSize, totalCount);
            }
            return pagedList;
        }

        public void SoftDelete(int id)
        {
            string procName5 = "[dbo].[CompensationPackages_SoftDelete]";
            _data.ExecuteNonQuery(procName5, inputParamMapper: delegate (SqlParameterCollection col)
            {
                col.AddWithValue("@Id", id);
            }, returnParameters: null);
        }

        public void DeletePackage(int id)
        {
            string procName5 = "[dbo].[CompensationPackages_Delete]";
            _data.ExecuteNonQuery(procName5, inputParamMapper: delegate (SqlParameterCollection col)
            {
                col.AddWithValue("@Id", id);
            }, returnParameters: null);
        }



        private static void AddCommonPackageParams(CompensationPackageAddRequest request, SqlParameterCollection col, int userId)
        {
            col.AddWithValue("@OrgId", request.OrgId);
            col.AddWithValue("@Name", request.Name);
            col.AddWithValue("@Description", request.Description);
            col.AddWithValue("@CreatedBy", userId);
            col.AddWithValue("@ModifiedBy", userId);
        }

        private static CompensationPackage MapSinglePackage(IDataReader reader, ref int startingIndex)
        {
            CompensationPackage package = new CompensationPackage();
            package.User = new BaseUser();

            package.CompPackage = new LookUp();
            package.CompPackage.Id = reader.GetInt32(startingIndex++);
            package.CompPackage.Name = reader.GetSafeString(startingIndex++);

            package.Description = reader.GetSafeString(startingIndex++);

            package.Organization = new LookUp();
            package.Organization.Id = reader.GetSafeInt32(startingIndex++); 
            package.Organization.Name = reader.GetSafeString(startingIndex++);

            package.User.Id = reader.GetSafeInt32(startingIndex++);
            package.User.Id = reader.GetSafeInt32(startingIndex++);

            return package;
        }
        public void AddJobCompensation(JobCompensationAddRequest request, int currentUserId)
        {


            string procName = "[dbo].[JobCompensations_Insert]";
            _data.ExecuteNonQuery(procName,
                inputParamMapper: delegate (SqlParameterCollection col)
                {
                    AddJobCompensationParams(request, col, currentUserId);
                    col.AddWithValue("@CreatedBy", currentUserId);

                },
                returnParameters: null) ;

        }

        public void UpdateJobCompensation(JobCompensationUpdateRequest request, int jobId, int compId, int userId)
        {


            string procName = "[dbo].[JobCompensations_Update]";
            _data.ExecuteNonQuery(procName,
                inputParamMapper: delegate (SqlParameterCollection col)
                {

                    AddJobCompensationParams(request, col, userId);
                    col.AddWithValue("@OldJobId", jobId);
                    col.AddWithValue("@OldCompId", compId );                      

                },
                returnParameters: null);

        }
        public List<JobCompensation> SelectByJobId(int JobId)
        {
            List<JobCompensation> list = null;
            

            string procName = "[dbo].[JobCompensations_SelectById]";


            _data.ExecuteCmd(procName, delegate (SqlParameterCollection paramCollection)
            {

                paramCollection.AddWithValue("@JobId", JobId);
             

            }, singleRecordMapper: delegate (IDataReader reader, short set)
            {
                int startingIndex = 0;
                JobCompensation jobCompensation = new JobCompensation();

                jobCompensation = MapSingleJobCompensation(reader, ref startingIndex);

                if (list == null)
                {
                    list = new List<JobCompensation>();
                }
                list.Add(jobCompensation);
            }
            );

            return list;

        }
        public JobCompensation SelectByJobandCompId(int JobId, int CompId)
        {
            JobCompensation jobCompensation = null;

            string procName = "[dbo].[JobCompensations_SelectByJobAndCompId]";


            _data.ExecuteCmd(procName, delegate (SqlParameterCollection paramCollection)
            {

                paramCollection.AddWithValue("@JobId", JobId);
                paramCollection.AddWithValue("@CompensationPackageId", CompId);


            }, delegate (IDataReader reader, short set)
            {
                int startingIndex = 0;
                jobCompensation = MapSingleJobCompensation(reader, ref startingIndex);

            }
            );

            return jobCompensation;

        }

        public void JobsCompensationDelete(int JobId, int CompId)
        {
            string procName = "[dbo].[JobCompensations_Delete]";
            _data.ExecuteNonQuery(procName,
            inputParamMapper: delegate (SqlParameterCollection col)
            {
                col.AddWithValue("@JobId", JobId);
                col.AddWithValue("@CompId", CompId);
            },
         returnParameters: null);
        }
        private static void AddJobCompensationParams(JobCompensationAddRequest request, SqlParameterCollection col, int userId)
        {
            col.AddWithValue("@JobId", request.JobId);
            col.AddWithValue("@CompensationPackageId", request.CompensationPackageId);

            
            col.AddWithValue("@ModifiedBy", userId);
        }
    private static JobCompensation MapSingleJobCompensation(IDataReader reader, ref int startingIndex)
    {
        JobCompensation jobCompensation = new JobCompensation();
            JobCompensationPackage jobCompensationPackage = new JobCompensationPackage();
            Job aJob = new Job();


            aJob.Id = reader.GetSafeInt32(startingIndex++);
            aJob.Title = reader.GetSafeString(startingIndex++);
            aJob.Description = reader.GetSafeString(startingIndex++);
            aJob.Requirements = reader.GetSafeString(startingIndex++);
            aJob.JobTypes = _lookUpService.MapSingleLookUp(reader, ref startingIndex);
            aJob.JobStatus = _lookUpService.MapSingleLookUp(reader, ref startingIndex);
            aJob.Organization = _lookUpService.MapSingleLookUp(reader, ref startingIndex);
            aJob.Location = reader.GetSafeString(startingIndex++);
            aJob.RemoteStatus = _lookUpService.MapSingleLookUp(reader, ref startingIndex);
            aJob.ContactName = reader.GetSafeString(startingIndex++);
            aJob.ContactPhone = reader.GetSafeString(startingIndex++);
            aJob.ContactEmail = reader.GetSafeString(startingIndex++);
            aJob.EstimatedStartDate = reader.GetSafeDateTime(startingIndex++);
            aJob.EstimatedFinishDate = reader.GetSafeDateTime(startingIndex++);
            aJob.DateCreated = reader.GetSafeDateTime(startingIndex++);
            aJob.DateModified = reader.GetSafeDateTime(startingIndex++);
            aJob.CreatedBy = reader.GetSafeInt32(startingIndex++);
            aJob.ModifiedBy = reader.GetSafeInt32(startingIndex++);
            
            jobCompensation.Job = aJob;
            jobCompensationPackage.Id = reader.GetSafeInt32(startingIndex++);
            jobCompensationPackage.Name = reader.GetSafeString( startingIndex++);
            jobCompensationPackage.OrgId = reader.GetSafeInt32(startingIndex++);
            jobCompensationPackage.OrgName = reader.GetSafeString(startingIndex++);
            jobCompensationPackage.CreatedBy = reader.GetSafeInt32(startingIndex++);
            jobCompensationPackage.ModifiedBy = reader.GetSafeInt32(startingIndex++);
            jobCompensationPackage.IsDeleted = reader.GetSafeBool(startingIndex++);
            jobCompensationPackage.DateCreated = reader.GetSafeDateTime(startingIndex++);
            jobCompensationPackage.DateModified = reader.GetSafeDateTime(startingIndex++);
            jobCompensationPackage.Description = reader.GetSafeString(startingIndex++ );
            
            jobCompensation.JobCompensationPackage = jobCompensationPackage;
            jobCompensation.CreatedBy = reader.GetSafeInt32(startingIndex++);
            jobCompensation.ModifiedBy = reader.GetSafeInt32(startingIndex++);
            jobCompensation.DateCreated = reader.GetSafeDateTime(startingIndex++);
            jobCompensation.DateModified = reader.GetSafeDateTime(startingIndex++);

            return jobCompensation;
    }
    }
}
